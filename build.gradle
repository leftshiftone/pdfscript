import org.gradle.api.tasks.testing.Test

buildscript {
    ext {
        versionKotlin = "1.3.41"
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "one.leftshift.asteria:asteria-code-analytics:latest.release"
        classpath "one.leftshift.asteria:asteria-dependency:latest.release"
        classpath "one.leftshift.asteria:asteria-email:latest.release"
        classpath "one.leftshift.asteria:asteria-publish:latest.release"
        classpath "one.leftshift.asteria:asteria-report:latest.release"
        classpath "one.leftshift.asteria:asteria-version:latest.release"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versionKotlin}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${versionKotlin}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
    }
}

apply plugin: "kotlin"
apply plugin: "org.jetbrains.dokka"
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "io.codearte.nexus-staging"

apply plugin: "one.leftshift.asteria-email"
apply plugin: "one.leftshift.asteria-report"
apply plugin: "one.leftshift.asteria-code-analytics"
apply plugin: "one.leftshift.asteria-dependency"
apply plugin: "one.leftshift.asteria-publish"
apply plugin: "one.leftshift.asteria-version"

repositories {
    jcenter()
}

nexusStaging {
    packageGroup = "one.leftshift"
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    stagingProfileId = System.getenv("OSSRH_STAGING_PROFILE_ID")
    username = System.getenv("OSSRH_LOGIN_NAME")
    password = System.getenv("OSSRH_LOGIN_PASSWORD")
}

asteriaEmail {
    smtpHost = System.getenv("ASTERIA_EMAIL_SMTP_HOST")
    if (System.getenv("ASTERIA_EMAIL_SMTP_PORT")) {
        smtpPort = System.getenv("ASTERIA_EMAIL_SMTP_PORT").toInteger()
    }
    smptUser = System.getenv("ASTERIA_EMAIL_SMTP_USER")
    smptPassword = System.getenv("ASTERIA_EMAIL_SMTP_PASSWORD")
    sender = System.getenv("ASTERIA_EMAIL_SENDER")
}

asteriaReport {
    reportingUrl = System.getenv("ASTERIA_REPORT_URL")
    depsJsonResult = file("${rootProject.buildDir}/dependencyUpdates/report.json")
    junitXmlResults = fileTree(rootProject.projectDir) {
        include("**/test-results/*/TEST-*.xml")
    }
    junitBinaryResults = files(["test"].collect {
        "${project.buildDir}/test-results/${it}/binary"
    })
}

asteriaDependency {
    dependencyManagementEnabled = false
    enableBranchSnapshotRepositories = true
}

asteriaCodeAnalytics {
    sonarUrl = System.getenv("SONAR_HOST_URL")
    sonarLoginToken = System.getenv("SONAR_LOGIN")
    sonarProperties = ["sonar.test.inclusions": "**/*Test*/**"]
    xmlCoverageReportEnabled = true
    coverageExcludes = []
}

afterEvaluate { project.tasks.postRelease.finalizedBy project.tasks.sendReleaseEmail }

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    compile "org.apache.pdfbox:pdfbox:2.0.15"
    compile "net.coobird:thumbnailator:0.4.8"
    compile "org.slf4j:slf4j-api:1.7.26"

    compile 'de.rototor.pdfbox:graphics2d:0.25'
    compileOnly 'org.apache.pdfbox:jbig2-imageio:3.0.2'
    compileOnly "org.apache.xmlgraphics:batik-transcoder:1.11"
    compileOnly "org.apache.xmlgraphics:batik-codec:1.11"

    testCompile "org.junit.jupiter:junit-jupiter:5.4.2"
    testCompile "org.apache.xmlgraphics:batik-transcoder:1.11"
    testCompile "org.apache.xmlgraphics:batik-codec:1.11"
    testRuntime "org.slf4j:slf4j-simple:1.7.26"
}
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "org.jetbrains.kotlin") {
            details.useVersion versionKotlin
        }
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = JavaVersion.VERSION_1_8
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

test {
    useJUnitPlatform()
}
tasks.withType(Test) { testTask ->
    testTask.beforeTest { descriptor ->
        logger.lifecycle(descriptor.toString())
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "${buildDir}/dokkaJavadoc"
}
task javadocJar(type: Jar) {
    from dokkaJavadoc
    classifier "javadoc"
}
task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}
artifacts {
    archives javadocJar, sourcesJar
}
asteriaPublish {
    enableBranchSnapshotRepositories = true
}
publishing {
    publications {
        release(MavenPublication) {
            artifactId = project.name
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom.withXml {
                Node root = asNode()
                root.appendNode("name", "PDFScript")
                root.appendNode("description", "PDFScript is an open source software library for script based PDF generation using a rendering evaluation graph.")
                root.appendNode("url", "https://github.com/leftshiftone/pdfscript")

                Node licenses = root.appendNode("licenses")
                Node license = licenses.appendNode("license")
                license.appendNode("name", "The Apache License, Version 2.0")
                license.appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.txt")

                Node developers = root.appendNode("developers")
                Node developer = developers.appendNode("developer")
                developer.appendNode("id", "leftshiftone")
                developer.appendNode("name", "Leftshift One")
                developer.appendNode("email", "contact@leftshift.one")
                developer.appendNode("organization", "Leftshift One Software GmbH")
                developer.appendNode("organizationUrl", "https://www.leftshift.one")

                Node scm = root.appendNode("scm")
                scm.appendNode("connection", "scm:git:git://github.com/leftshiftone/pdfscript.git")
                scm.appendNode("developerConnection", "scm:git:ssh://github.com:leftshiftone/pdfscript.git")
                scm.appendNode("url", "https://github.com/leftshiftone/pdfscript")
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.toString().endsWith("SNAPSHOT") ? "https://s01.oss.sonatype.org/content/repositories/snapshots" : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username System.getenv("OSSRH_LOGIN_NAME")
                password System.getenv("OSSRH_LOGIN_PASSWORD")
            }
        }
    }
}
ext."signing.keyId" = System.getenv("OSSRH_SIGN_KEY_ID")
ext."signing.password" = System.getenv("OSSRH_SIGN_KEY_PASSWORD")
ext."signing.secretKeyRingFile" = System.getenv("OSSRH_SIGN_KEY_PATH")
signing {
    sign publishing.publications
}
